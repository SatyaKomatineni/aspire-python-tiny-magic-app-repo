#*************************************************
# To test IConfig (3/15/24)
# See: appconfignames.py for filling this file
#*************************************************

# This will  instantiate the class
[testclass]
classname="apptests.test_factory.TestClass"

# This will return "Hello World to the caller"
[request.readdata]
classname="apptests.test_factory.HelloWorldReader"
text="Hello world"

[request.readdata_di]
classname="apptests.test_factory.HelloWorldReaderDI"
text="Hello world Data Ingestion"

#*************************************************
#* Classes for test_factory_classes.py
#*************************************************
[testclasses_class1]
classname="apptests.test_factory_classes.TestSingletonClassNoConstructor"

[testclasses_class2]
classname="apptests.test_factory_classes.TestSingletonClassWithConstructor"
param1="param1 value"
param2="param2 value"

[testclasses_class3]
classname="apptests.test_factory_classes.TestMIClassWithConstructor"
param1="param1 value"
param2="param2 value"

[testclasses_class4]
classname="apptests.test_factory_classes.TestMIClassNoConstructor"

[testclasses_class5]
classname="apptests.test_factory_classes.TestClassWithInitializer"
param1="param1 value"
param2="param2 value"

[testclasses_class6]
classname="apptests.test_factory_classes.TestClassSIWithInitializerArgs"
param1="param1 value"
param2="param2 value"

[testclasses_class7]
classname="apptests.test_factory_classes.TestClassMIECWithInitializerArgs"
param1="param1 value"
param2="Send back hello world via execute method"

[testclasses_class8]
classname="apptests.test_factory_classes.TestDataClass"
param_str="string value"
param_int_1=5
param_float=5.6
param_bool=true
param_list=[1,2,3]
param_dict={key1 = "value1", key2 = "value2"}
